# -*- coding: utf-8 -*-
"""Lists.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1awmo_4-PFnpayoj9rFCfFSpiUkQI3jWz
"""

rgrocery_list = ['flour','cheese','carrots']
for ind,item in enumerate(grocery_list):
  print("#=",ind,":",item)

#List comprehension with loops
list1=[1,2,3,4,5]
newlist=[]
for i in list1:
  newlist.append(i+1)
print(list1)

list2=[i+5 for i in list1]
list3=[i+5 for i in range(1,11)]
print(list2,list3)

#condition in list

#List comprehension with loops
newlist1=[]
for i in range(20):
  if i%2==0:
    if i%3==0:
      newlist1.append(i)
    else:
      print("invalid")
print(newlist1)

liar=[i for i in range (20) if i%2==0 if i%3==0]
print(liar)

#List comprehension with if-else
for i in range(2,-5,-1):
  print(i,end=",")

x=0
for i in range(10):
  for j in range(-1,-10,1):
    x+=1
    print(x)

# Python program to find second largest number

numbers = [50, 40, 23, 70, 56, 12, 5, 10, 7]
numbers.sort()
print(numbers[-2])

# Python program to find second largest number
#it can be done using max function and remove() method
numbers = [50, 40, 23, 70, 56, 12, 5, 10,80, 7]
i=0
m=0
m2=0
while i<len(numbers):
  if numbers[i]>m:
    m=numbers[i]
  i+=1
j=0 
while j<len(numbers):
  if numbers[j]>m2 and numbers[j]!=m:
    m2=numbers[j]
  j+=1
print(m2)

numbers = [100, 40, 23, 70, 56, 12, 5, 10,80, 7]
num_h=0
num_s=0

for i in numbers:                       
  if num_h<i:
    num_h=i
print("largest no",num_h)

for i in numbers :
  if num_s<i and i!=num_h:
    num_s=i
print("second largest no",num_s)

# Python program to find largest number
#Set the first element as the largest number candidate.
#Loop through the list of numbers.
#Update the largest number candidate if a number is greater than

numbers = [50, 40, 23, 70, 56, 12, 5, 10, 7] 
max=numbers[0]                                         #len()can be used to replace for with while
for i in (numbers):
  if i>max:
    max=i                                               #updating max as it was 1st element
print(max)

student_marks = [23, 45, 67, 89, 90, 54, 34, 21, 34, 23, 19, 28, 10, 45, 86, 87, 9]
list_length = len(student_marks)
index = 0
less_than50 = 0
more_than50 = 0
while index < list_length:
 marks = student_marks[index]
 if marks < 50:
  less_than50 = less_than50 + 1
 else:
  more_than50 = more_than50 + 1
 index = index + 1
print("Marks more than 50: " + str(more_than50))
print("Marks less than 50: " + str(less_than50))

#Write a code that prints the maximum in this list.
numbers= [50, 40, 23, 70, 56, 12, 5, 10, 7]                #sort cannnot be stored in new list
new_list=sorted(numbers)                                     #so we use sorted
print(new_list[-1])

#Write a code that the reverses the order of the items means in opposite order.
places=["delhi", "gujrat", "rajasthan", "punjab", "kerala"]
for i in (places):
  rev=places[::-1]
print(rev)

places=["delhi", "gujrat", "rajasthan", "punjab", "kerala"]
i=1
while i<=len(places):
  print(places[-i])
  i+=1

numbers=[50, 40, 23, 70, 56, 12, 5, 10, 7]
i=0
count=0
while i<len(numbers):
  if numbers[i]>20 and numbers[i]<40:
    count=count+1
  i+=1
print(count)

numbers=[50, 40, 23, 70, 56, 12, 5, 10, 7]
max=0
i=0
while i<len(numbers):
  if max<numbers[i]:
    max=numbers[i]
  i+=1
print(max)



numbers = [50, 40, 23, 70, 56, 12, 5, 10, 7] 
max=numbers[0]                                         #len()can be used to replace for with while
for i in (numbers):
  if i>max:
    max=i                                               #updating max as it was 1st element
print(max)

n = int(input("enter a nth term = "))
f = 1
s = 1
for i in range(1, n + 1):
     f = f * i
     s = s + 1 / f
print("sum of sequence = ", s)

n=int(input("enter last term"))
i=1
s1= 1
s2= 1
while i <= n:
  s1= s1*i
  s2= s2+1/s1
  i+=1
print(s2)

#string palindrome
list1=["n","a","y","a","n"]
i=0
while i<len(list1):
  if list1[i]==list1[-i-1]:
    print(True)
  else:
    print(False)
  i+=1

list1=["a","n","n","a"]
list2=list1
i=0
j=[]
while i<len(list1):
  j+=list1[-i-1]
  i+=1
if list2==j:
  print("it is a palindrome ")
else:
  print("it is not a palindrome")

#reversing a list or list palindrome
list1=["m","o","m"]
n=list1
new=[]
i=0
while i<len(list1):
  new+=n[-i-1]
  i+=1
print(new)
if new==list1:
  print("palindrome")
else:
  print("not palindrome")

#binary to decimal
bin1=[100]
g=0
h=0
dec=[]
g=0
for i in range (len(bin1)-1,-1,-1):
  dec+=[bin1[i]]
  h+=dec[g]*2**g
  g+=1
print(h)
print(dec)

bin1=[1,0,1,0,1,1]
decimal = 0
count = len(bin1) -1
for i in range(-count,0):
  decimal += bin1[i]*(2**count)
  count -= 1
print(decimal)

nums=[1,2,3,4,5,6,7]
for i in range(len(nums)-1, -1, -1):
  print(nums[i])


list1 = [10, 20, 30, 40, 50]
for i in range(len(list1)-1,-1,-1):

    print(list1[i])

a=int(input("Enter a no"))
b=int(input("Enter anther no"))

c=a/b
if (a/b-a//b)>=0.5:
  print(int(c)+1)
else:
  print(int(c))

list1 = [10, 20, 30, 40, 50]


for i in range(len(list1)-1,-1,-1):

    print(list1[i])

bracket="( ) [ ] { }"
list1=bracket.split()
enter= input("Enter a bracket")
enter2= input("Enter a bracket")
for i in list1:
  if a==b: 
    print("yes")
else:
  print("error")

#for coverting str to list
#use of list function
#list.sort(reverse=True) descending order
#for getting items use i and for index use len function for list indices
#list=" ".join
#list of lists can be converted to flat list using itertool
#for finding unique items we use {} and for duplicates we use if with count
INT=12345
NEW=[int(i) for i in str(INT)]
print(type(NEW[3]))

punc=["'","?",".","(",")",";",":"]
str1=input("enter a string")
#for i in str1:
  #if str in

num=int(input("enter a no"))
list1=['a',1,'2','5','b','q']
#i=-num
for i in range(-num,0):
    print(list1[i])

#while i<=0:

num=int(input("enter a no"))
list1=['a',1,'2','5','b','q']
for i in range (5,0,-1):
  if i<=1:
    print(list1[-i])

# Use the magic square numbers for reuse!!!
# magic = [[8, 1, 6, 3, 5, 7, 4, 9, 2], [6, 1, 8, 7, 5, 3, 2, 9, 4], [4, 3, 8, 9, 5, 1, 2, 7, 6], [2, 7, 6, 9, 5, 1, 4, 3, 8],  [2, 9, 4, 7, 5, 3, 6, 1, 8], [4, 9, 2, 3, 5, 7, 8, 1, 6], [6, 7, 2, 1, 5, 9, 8, 3, 4], [8, 3, 4, 1, 5, 9, 6, 7, 2]]
magic_square=[[8, 1, 6,],
              [ 3, 5, 7],
              [ 4, 9, 2]]
L=len(magic_square)
#for sum of rows
sum_r=0
for m in range (0,L):
  sum_r=0
  for n in range(0,len(magic_square[m])):
    sum_r+=magic_square[m][n]


#for column sum
sum_c=0                           #item of row is fixed and columns change
for y in range (0,L):
  sum_c=0
  for z in range(0,len(magic_square[y])):
    sum_c+=magic_square[z][y]
  

#for diagonal sum
sum_d=0
for k in range(0,L):
    sum_d+=magic_square[k][k]


#for diagonal d2
sum_d2=0
for l  in range(0,L):
  sum_d2+=magic_square[l][(L-1)-l]


if sum_c==sum_d==sum_d2==sum_r==sum_c:
  print("magic sqaure")
else:
  print("not a magic sqaure")

#valid parentheses
brac=input("enter brackets")
cont=[]
for i in brac:
  if len(cont)==0:
    cont.append(i)
  else:
    if i==")" and cont[-1]=="(": 
      cont.pop() 
    elif i=="]" and cont[-1]=="[":
      cont.pop()
    elif i=="}" and cont[-1]=="{":
      cont.pop()
    else:
      cont.append(i)
if len(cont)==0:
  print("valid")
else:
  print("invalid")











